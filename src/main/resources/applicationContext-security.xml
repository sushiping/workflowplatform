<?xml version="1.0" encoding="UTF-8"?>  
<!-- security配置相关 -->
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/cache 
    http://www.springframework.org/schema/cache/spring-cache.xsd
     http://www.springframework.org/schema/security 
     http://www.springframework.org/schema/security/spring-security-4.0.xsd" default-lazy-init="false">
     
     <!-- 这个配置文件是从原来Spring Security 2.0 的配置文件升级过来的
     主要的升级工作就是修改类的权限定名，因为Spring Security升级到4.0后，很多类文件进行了重构
     包的位置进行了调整，导致类的权限定名变化了。
     
     另外一个比较大的变化是Spring Security 4.0，利用Spring框架的技术，增加了很多自定义的标签，这些标签可以
     让我们减少bean定义中的class的填写，最大的好处就是为了类的全限定名发生变化了，由于采用了自定义的标签，与类定义解耦
     了，可以让我们的xml文件定义可以升级而不进行任何的修改。
      -->
     
	<bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
		<constructor-arg>
			<list>
				<!-- 这个地方是值得优化的，因为很多是不需要进入filter的，进入过多将导致性能问题 -->
				<security:filter-chain pattern="/sof_login.jsp" filters="none"/>
				<!-- 过滤css和js及图片相关内容-->
				<security:filter-chain pattern="/skins/**" filters="none"/>
				<security:filter-chain pattern="/core/**" filters="none"/>
				<security:filter-chain pattern="/j_app_security_check" filters="
					securityContextPersistenceFilter,
					logoutFilter,
					exceptionTranslationFilter,
					filterInvocationInterceptor" />
				<security:filter-chain pattern="/**" filters="
					securityContextPersistenceFilter,
					logoutFilter,
					formLoginFilter,
					exceptionTranslationFilter,
					filterInvocationInterceptor" />
			</list>
		</constructor-arg>
	</bean>
	
	<bean id="securityContextPersistenceFilter"
		class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
		<constructor-arg>
			<bean class='org.springframework.security.web.context.HttpSessionSecurityContextRepository'>
			<property name='allowSessionCreation' value='true' />
			</bean>
		</constructor-arg>
	</bean>
	
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="/sof_login.jsp"/> <!-- URL redirected to after logout -->
		<constructor-arg>
			<list>
				<ref bean="rememberMeServices"/>
				<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
			</list>
		</constructor-arg>
	</bean>
	
	<!--
		利用cookie自動登入
	-->
  	<bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
		<constructor-arg name="key" value="blhOaWebKey"/>
		<constructor-arg name="userDetailsService" ref="userBo"/>
		<property name="tokenValiditySeconds" value="864000"/>
	</bean>
	
	<!-- ajax方式登录 
	<bean id="ajaxLoginFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationFailureHandler" ref="ajaxAuthenticationFailureHandler" />
		<property name="authenticationSuccessHandler" ref="ajaxAuthenticationSuccessHandler" />
		<property name="filterProcessesUrl" value="/j_app_security_check" />
	</bean>
	
	<bean id="ajaxAuthenticationSuccessHandler" class="com.zoomkey.core.security.ajax.AuthenticationSuccessHandler">
	</bean>
	
	<bean id="ajaxAuthenticationFailureHandler" class="com.zoomkey.core.security.ajax.AuthenticationFailureHandler">
	</bean>
	-->
	<!-- 跳转方式登录 -->
	<bean id="formLoginFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationFailureHandler" ref="authenticationFailureHandler" />
		<property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" />
		<property name="filterProcessesUrl" value="/j_hcms_security_check" />
	</bean>
	
	<bean id="authenticationSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
		<constructor-arg name="defaultTargetUrl" value="/process/preShowFlowDefine.action" />
	</bean>
	
	<bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<constructor-arg name="defaultFailureUrl" value="/sof_login.jsp?error=loginFailure">
		</constructor-arg>
	</bean>
	
	<!--
		对异常的处理转向
	-->	
	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<constructor-arg>
			<ref bean="authenticationProcessingFilterEntryPoint"/>
		</constructor-arg>
		<property name="accessDeniedHandler">
			<bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
				<property name="errorPage" value="/common/403.jsp"/>
			</bean>
		</property>
   </bean>
	
	<!--
	    用户尚未通过身份验证时，会将控制转交到一个认证入口点，提供三种实现
	   BasicProcessingFilterEnteyPoint :HTTP基本认证处理
	   LoginUrlAuthenticationEntryPoint :将用户重新定向到一个基于HTML表单的登入界面
	   CasProssingFilterEntryPoint :将用户重新定向到一个基于Yale CAS登入界面
	 -->	
	<bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<constructor-arg value="/sof_login.jsp"></constructor-arg>
	</bean>
	
	<!--
         filterInvocationInterceptor在执行转向url前检查objectDefinitionSource中设定的用户权限信息
         过程：
         首先，objectDefinitionSource中定义了访问URL需要的属性信息(这里的属性信息仅仅是标志，告诉accessDecisionManager要用哪些voter来投票)
         然后，authenticationManager掉用自己的provider来对用户的认证信息进行校验。
         最后，有投票者根据用户持有认证和访问url需要的属性，调用自己的voter来投票，决定是否允许访问。-->
    <bean id="filterInvocationInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <property name="authenticationManager"><ref bean="authenticationManager"/></property>
      	<property name="accessDecisionManager"><ref local="httpRequestAccessDecisionManager"/></property>
      	<property name="securityMetadataSource"> <ref local="rdbmsFilterInvocationDefinitionSource" /></property>
      	<!-- 不能进行重新的验证，为了保证系统安全验证结束后，系统会从缓存中删除Credentials，重新验证会导致验证失败
      	详细见ProviderManager的210行 -->
      	<property name="alwaysReauthenticate" value="false" />
      	<property name="observeOncePerRequest" value="false"></property>
    </bean>
    
    <!-- ======================== AUTHENTICATION ======================= -->
     <!--
         通过Providers提供认证者列表,如果一个认证提供者失败可以尝试另外一个认证提供者,以保证获取不同来源的身份认证，如
         DaoAuthenticationProvider 从数据库中读取用户信息验证身份
         AnonymousAuthenticationProvider 匿名用户身份认证
         RememberMeAuthenticationProvider 已存cookie中的用户信息身份认证

         其它的还有
         AuthByAdapterProvider 使用容器的适配器验证身份
         CasAuthenticationProvider 根据Yale中心认证服务验证身份, 用于实现单点登录
         JaasAuthenticationProvider 从JASS登录配置中获取用户信息验证身份
         RemoteAuthenticationProvider 根据远程服务验证用户身份
         RunAsImplAuthenticationProvider 对身份已被管理器替换的用户进行验证
         X509AuthenticationProvider 从X509认证中获取用户信息验证身份
         TestingAuthenticationProvider 单元测试时使用

         每个认证者会对自己指定的证明信息进行认证，如DaoAuthenticationProvider仅对UsernamePasswordAuthenticationToken这个证明信息进行认证。
     -->
	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider ref="daoAuthenticationProvider"></security:authentication-provider>
		<security:authentication-provider ref="rememberMeAuthenticationProvider"></security:authentication-provider>
	</security:authentication-manager>
   
		   <!-- ========================  认证提供者    开始    ======================= -->
	<!--
		基于数据库的认证提供者
         authenticationDao 认证数据访问对象，用于获取用户信息，包括：用户名，用户密码，用户状态和用户权限
         userCache ehcache 缓存user信息。
         saltSource 对密码进行私钥加密
     -->
     
	<bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="hideUserNotFoundExceptions" value="false" />
		<property name="userDetailsService" ref="userBo">
		</property>
		<property name="passwordEncoder">
			<ref local="passwordEncoder" />
		</property>
		<property name="saltSource">
			<ref local="saltSource" />
		</property>
		 
		<property name="userCache"><ref local="webresdbCache"/></property>
	</bean>
	
	<bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
		
	<bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
			<property name="userPropertyToUse">
				<value>getSalt</value>
			</property>
	</bean>
	
		<!-- 利用cookie 认证用户 -->
	<bean id="rememberMeAuthenticationProvider"
		class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
		<constructor-arg><value>zkEmsWebKey</value></constructor-arg>
	</bean>
		   <!-- ========================  认证提供者    结束    ======================= -->
	
	<!-- httpRequestAccessDecisionManager（投票通过策略管理器）用于管理投票通过策略。Acegi提供三种投票通过策略的实现：
		 AffirmativeBased（至少一个投票者同意方可通过），ConsensusBased（多数投票者同意方可通过），UnanimousBased（所有投
		 票者同意方可通过） 
		 allowIfAllAbstainDecisions : 设定是否允许：“没人反对就通过”的投票策略
		 decisionVoters : 投票者
	-->
    <bean id="httpRequestAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased" >
     	<property name="allowIfAllAbstainDecisions"><value>false</value></property>
     	<constructor-arg>
        	<list>
           		<ref bean="roleVoter"/>
        	</list>
     	</constructor-arg>
  	</bean>
  	
  	<!--
         必须是以rolePrefix设定的value开头的才会进行投票,否则为弃权
    该值可以为空，本项目中，由于采用用户id作为角色，也就是一个用户一个角色的设计方式，
    因此采用用户id作为角色的定义，因此不能有前缀。
     -->
  	<bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
    	<property name="rolePrefix"><value></value></property>
  	</bean>
  	
	<!--  基于URL的权限定义，由URL以及可以访问该URL的角色（在本项目中是可以访问到该URL的用户id）
	这部分采用annotation进行定义，用来测试混合使用xml定义和annotation定义是否有问题。结论是没有问题。
    <bean id="rdbmsFilterInvocationDefinitionSource"  class="com.zoomkey.core.security.RdbmsFilterInvocationSecurityMetadataSource">
  		<property name="rdbmsInvocationDefinition" ref="menuBo"/>
    </bean>
    	-->
    <!--
	  -  This logger automatically receives AuthenticationEvent messages from
	  -  DaoAuthenticationProvider, the "security.auth.daoAuthenticationProvider".
	  -  Nothing special.
	 -->
	<bean  id="security.loggerListener"
		class="org.springframework.security.authentication.event.LoggerListener"/>
		
	
		
	<!-- userCache   开始   -->	
	<bean id="cacheManagerForSecurity"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />

	<bean id="webresCacheBackend" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<property name="cacheManager">
			<ref local="cacheManagerForSecurity" />
		</property>
		<property name="cacheName">
			<value>webresdbCache</value>
		</property>
	</bean>
	<bean id="webresdbCache" class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">  
      <property name="cache"><ref local="webresCacheBackend"/></property>  
   </bean> 
	<!-- userCache   结束  -->	
    
</beans>
